/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.mk.ppmc.apps;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import json.JSONArray;
import json.JSONException;
import json.JSONObject;
import json.mkJSON;
import net.mk.FJTasks.ImageStampFJTask;
import net.mk.FJTasks.GraphicsPaintFJTask2;
import net.mk.ppmcu2D.ScreenShareClient;
import net.mk.ppmcuGUI.Web;
import net.mk.ppmcuGUI.WorldSpeedTestGUI;

/**
 * 5/4/2013
 * 1. Add image preview for stamp
 * 2. Stamp location
 * 3. Header and footer Adjustment
 * 4. Border
 * 5. Putting text on image.
 * 6. Poster of images
 * 7. Resize all the images
 * 8. Fibonacci style poster of all images
 * 9. Face Poster based on all the images
 * @author PDI
 */
public class ImageStampPanel extends javax.swing.JPanel {

    public static boolean CLUSTER_SHARE=false;
    protected static String LICENSE_KEY="";
    
    
    protected BufferedImage StampImage;
    protected JFileChooser JFC;
    DefaultTableModel DTM;
    String[] ColumnNames={"Sl no.","Image Name","Status","Path","Time"};
    JSONObject SysSpec;
    DefaultComboBoxModel models = new DefaultComboBoxModel(new String[]{
        "Select Position",
        "Left-Top",
        "Top-Center",
        "Top-Right",
        "Left-Center",
        "Center-Center",
        "Center-Right",
        "Left-Bottom",
        "Bottom-Center",
        "Bottom-Right"});
    

    /**
     * Creates new form ImageStampPanel
     */
    public ImageStampPanel(String WebServerName,String LICENSE_KEY, JSONObject SysSpec) {
        this.SysSpec=SysSpec;
        ImageStampPanel.LICENSE_KEY=LICENSE_KEY;
        DTM=new DefaultTableModel();
        initComponents();
        JFC=new JFileChooser();
        Object[][] DV = new Object[0][0];
        DTM.setDataVector(DV, ColumnNames);
      //  StampImage=(BufferedImage) jLabel2.getIcon();
        
      StampImage= new BufferedImage(
     jLabel2.getIcon().getIconWidth(),
     jLabel2.getIcon().getIconHeight(),
     BufferedImage.TYPE_INT_RGB);
Graphics g = StampImage.createGraphics();
// paint the Icon to the BufferedImage.
 jLabel2.getIcon().paintIcon(null, g, 0,0);
g.dispose();


        validate();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();

        jScrollPane1.setOpaque(false);

        jTable1.setModel(DTM);
        jTable1.setOpaque(false);
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("3. Multi Core Stamping");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("3. Single Core Stamping");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("No task submitted...");

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 204, 204));
        jButton1.setText("1. Select Stamp");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/mk/icons/MCW_Round64x60px.png"))); // NOI18N
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jLabel2);

        jComboBox2.setModel(models);
        jToolBar1.add(jComboBox2);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(204, 204, 204));
        jButton2.setText("2. Select Images");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(284, 284, 284))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        JFC.setFileSelectionMode(JFileChooser.FILES_ONLY);
        JFC.setMultiSelectionEnabled(false);
        JFC.showOpenDialog(jLabel2);
        if(JFC.getSelectedFile()!=null)
        try {
            StampImage=ImageIO.read(JFC.getSelectedFile());
            jLabel2.setText(JFC.getSelectedFile().getName());
            
            BufferedImage img = new BufferedImage(64, 64, BufferedImage.TYPE_INT_RGB);
 
			Graphics2D g = img.createGraphics();			
 
			AffineTransform trans = AffineTransform.getScaleInstance((double)64/StampImage.getWidth(), 
					(double)64/StampImage.getHeight());
 
			g.drawRenderedImage(StampImage, trans);
 
			ImageIcon icon = new ImageIcon(img);
                        
            jLabel2.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(ImageStampPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFC.setFileSelectionMode(JFileChooser.FILES_ONLY);
        JFC.setMultiSelectionEnabled(true);
        JFC.showOpenDialog(jLabel2);
        //{"Sl no.","Image Name","Status","Path","Time"};
        if(JFC.getSelectedFile()!=null)
            for(int i=0;i<JFC.getSelectedFiles().length;i++){
            try {
                DTM.addRow(new String[]{(i+1)+"",JFC.getSelectedFiles()[i].getName(),"Queued",JFC.getSelectedFiles()[i].getCanonicalPath(),"NA"});
            } catch (IOException ex) {
                Logger.getLogger(ImageStampPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
      
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       
      jLabel1.setText("Done in "+StampAllTheImages(true)+"secs");
            
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jLabel1.setText("Done in "+StampAllTheImages(false)+"secs");
       
    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private Double StampAllTheImages(boolean MULTICORE){
       long begTest = new java.util.Date().getTime();
       Double secs;
       if(MULTICORE){ //Multiore Processing
        List futuresList = new ArrayList();
        ForkJoinPool fjPool = new ForkJoinPool(DTM.getRowCount());
         //DTM->{"Sl no.","Image Name","Status","Path","Time"};
        for(int i=0;i<DTM.getRowCount();i++){
             futuresList.add(fjPool.submit( new ImageStampFJTask(StampImage,DTM.getValueAt(i, 3).toString(),jComboBox2.getSelectedIndex(),0 )));
        }

       // System.out.println("#ThreeD.paint() Start collecting results");
        int i=0;
        
        for (Object future : futuresList) {
            try {
                DTM.setValueAt(((Future)future).get(), i, 4);
                DTM.setValueAt("Done", i, 2);
                i++;
            } catch (    InterruptedException | ExecutionException e) {
            }
        }
        
       }
       else {
       //Single Core Processing
            for(int i=0;i<DTM.getRowCount();i++){
                try {
                    long smTest = new java.util.Date().getTime();
                    Double secs2;
                    BufferedImage ImageToStamp=ImageIO.read(new File(DTM.getValueAt(i, 3).toString()));
                    Graphics g = ImageToStamp.getGraphics();
                    
                    /**
                     * {
        "Select Position",
        "Left-Top",
        "Top-Center",
        "Top-Right",
        "Left-Center",
        "Center-Center",
        "Center-Right",
        "Left-Bottom",
        "Bottom-Center",
        "Bottom-Right"}
                     */
                   
                    if(jComboBox2.getSelectedIndex()==1)//"Left-Top"
                    g.drawImage(StampImage, 0,0, new Frame());
                    if(jComboBox2.getSelectedIndex()==2)// "Top-Center"
                    g.drawImage(StampImage, (ImageToStamp.getWidth()/2)-(StampImage.getWidth()/2),0, new Frame());
                    if(jComboBox2.getSelectedIndex()==3)//"Top-Right",
                    g.drawImage(StampImage, ImageToStamp.getWidth()-StampImage.getWidth(),0, new Frame());
                    if(jComboBox2.getSelectedIndex()==4)//"Left-Center",
                    g.drawImage(StampImage, 0,(ImageToStamp.getHeight()/2)-(StampImage.getHeight()/2), new Frame());
                    if(jComboBox2.getSelectedIndex()==5)//"Center-Center",
                    g.drawImage(StampImage, (ImageToStamp.getWidth()/2)-(StampImage.getWidth()/2),(ImageToStamp.getHeight()/2)-(StampImage.getHeight()/2), new Frame());
                    if(jComboBox2.getSelectedIndex()==6)//"Center-Right",
                    g.drawImage(StampImage, ImageToStamp.getWidth()-StampImage.getWidth(),(ImageToStamp.getHeight()/2)-(StampImage.getHeight()/2), new Frame());
                    if(jComboBox2.getSelectedIndex()==7)//"Left-Bottom",
                    g.drawImage(StampImage, 0,ImageToStamp.getHeight()-StampImage.getHeight(), new Frame());
                    if(jComboBox2.getSelectedIndex()==8)//"Bottom-Center",
                    g.drawImage(StampImage, (ImageToStamp.getWidth()/2)-(StampImage.getWidth()/2),ImageToStamp.getHeight()-StampImage.getHeight(), new Frame());
                    if(jComboBox2.getSelectedIndex()==9)//"Bottom-Right"
                    {
                       // System.out.println((ImageToStamp.getWidth()-StampImage.getWidth())+"\t"+(ImageToStamp.getHeight()-StampImage.getHeight()));
                        g.drawImage(StampImage, ImageToStamp.getWidth()-StampImage.getWidth(),ImageToStamp.getHeight()-StampImage.getHeight(), new Frame());
                    }
                    ImageIO.write(ImageToStamp, "png", new File(DTM.getValueAt(i, 3).toString()));
                    g.dispose();
                    secs2 = new Double((new java.util.Date().getTime() - smTest) * 0.001);
                    DTM.setValueAt(secs2, i, 4);
                    DTM.setValueAt("Done", i, 2);
                } catch (IOException ex) {
                    Logger.getLogger(ImageStampPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
       
       }
         secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
         return secs;
    }

    protected void paintComponent(Graphics g) {
        try {
           

            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);

            g2.setPaint(Color.gray);
            int x = 0;
            int y = 0;
            // fill RoundRectangle2D.Double
            GradientPaint redtowhite = new GradientPaint(x, y, Color.LIGHT_GRAY, x, getHeight() / 2,
                    Color.DARK_GRAY);
            g2.setPaint(redtowhite);
            //g2.fill(new RoundRectangle2D.Double(x, y, this.getWidth(), this.getHeight(), 10, 10));
            g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

            g2.setPaint(Color.GRAY);

            Paint p;
            p = new RadialGradientPaint(new Point2D.Double(getWidth() / 2.0,
                    getHeight() / 2.0), getWidth() / 2.0f,
                    new float[]{0.0f, 1.0f},
                    new Color[]{new Color(6, 76, 160, 127),
                new Color(0.0f, 0.0f, 0.0f, 0.8f)});
            g2.setPaint(p);
            g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

            //g2.drawImage(img, 0, 0, this);
            Font font = new Font("League-Gothic", Font.BOLD, 40);

            //Create Core
            int core = SysSpec.getInt("NUMBER_OF_PROCESSORS");
            int Size = 15;
            int StartX = 12;//this.getWidth()-core*(Size+2);
            int StartY = 5;
            g2.setPaint(Color.DARK_GRAY);
            g2.fill(new Rectangle2D.Double(StartX - 10, StartY, core * (Size + 2) + 5, Size + 5));
            g2.setPaint(Color.WHITE);
            g2.fill(new Rectangle2D.Double(StartX - 9, StartY + 1, core * (Size + 2) + 3, Size + 3));

            g2.setPaint(Color.DARK_GRAY);

            for (int i = 0; i < core; i++) {
                g2.setPaint(Color.DARK_GRAY);
                int thisStart = StartX + (Size + 2) * i - 7;
                g2.fill(new Rectangle2D.Double(thisStart, StartY + 3, Size, Size));
                font = new Font("League-Gothic", Font.ROMAN_BASELINE, 12);
                g.setFont(font);
                g2.setPaint(Color.GREEN);
                g2.drawString("" + (i + 1), thisStart + 3, StartY + 15);
            }
            
            font = new Font("League-Gothic", Font.PLAIN, 11);
            g.setFont(font);
            g.setColor(Color.LIGHT_GRAY);
            String toPrintNameandIP=SysSpec.getString("OPERATING_SYSTEM")+"/"+SysSpec.getString("PC_NAME")+"/"+SysSpec.getString("IP_ADDRESS");
            g.drawString(toPrintNameandIP,getWidth()-(toPrintNameandIP.length()*7),getHeight()-5);
            //SysInfo-End
        } catch (JSONException ex) {
            Logger.getLogger(ScreenShareClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
