/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.mk.dcApps;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import json.JSONException;
import json.JSONObject;
import json.mkJSON;
import mkfs66o96.ReadWriteTextFile;
import net.mk.DTasks.DCTaskExecuteUDApp;
import net.mk.dc.DistributedTaskPool;
import net.mk.ppmcuGUI.MCWConfClass;
import net.mk.ppmcuGUI.Web;

/**
 *
 * @author PDI
 */
public class UD_DCApps extends javax.swing.JPanel {
String LICENSE_KEY;
static JSONObject RemoteSysSpec;
public JSONObject[] RemoteSysSpecs;
static String[] listOfUDApps;
static DefaultListModel dlm;
protected String WebServerName="127.0.0.1:8888/multicoreworld";
// protected String WebServerName="multicoreworld.manojky.net";
    /**
     * Creates new form UD_DCApps
     */
    public UD_DCApps(String WebServerName,String LICENSE_KEY,JSONObject[] RemoteSysSpecs) {
        this.WebServerName=WebServerName;
        this.LICENSE_KEY=LICENSE_KEY;
        this.RemoteSysSpecs=RemoteSysSpecs;
//              RemoteSysSpec=MCWConfClass.SysSpec;
//        try {        
//            listOfUDApps=mkJSON.getStringArrayFromJSONArray(RemoteSysSpec.getJSONObject("UserDevelopedApps").names());
//        } catch (JSONException ex) {
//            Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
//        }
    
        dlm=new DefaultListModel();
        
//        for(int i=0;i<listOfUDApps.length;i++){
//            dlm.addElement(listOfUDApps[i]);
//        }
        
        initComponents();
        
        //Also add example apps
        // MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put(AppAKA.getText(),DCAppName+"Interpreter");//DCApp1
        try { 
        MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put("net.mk.dcApps.SolSys", "SolarSysGUI");
        MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put("net.mk.dcApps.CheckPrime", "VerifyPrimeNumberGUI");
        //CodeBase.SysSpec.getJSONObject("UserDevelopedApps").put("net.mk.dcApps.SolSys", "SolSys");
         } catch (JSONException ex) {
             
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public UD_DCApps(String WebServerName,String LICENSE_KEY,JSONObject RemoteSysSpec) {
        this.WebServerName=WebServerName;
        this.LICENSE_KEY=LICENSE_KEY;
        this.RemoteSysSpecs=new JSONObject[]{} ;
//
        this.RemoteSysSpec=RemoteSysSpec;
//        try {        
//            listOfUDApps=mkJSON.getStringArrayFromJSONArray(RemoteSysSpec.getJSONObject("UserDevelopedApps").names());
//        } catch (JSONException ex) {
//            Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
//        }
    
        dlm=new DefaultListModel();
        
//        for(int i=0;i<listOfUDApps.length;i++){
//            dlm.addElement(listOfUDApps[i]);
//        }
        
        initComponents();
        
        //Also add example apps
        // MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put(AppAKA.getText(),DCAppName+"Interpreter");//DCApp1
        try { 
        MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put("net.mk.dcApps.SolSys", "SolarSysGUI");
        MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put("net.mk.dcApps.CheckPrime", "VerifyPrimeNumberGUI");
        //CodeBase.SysSpec.getJSONObject("UserDevelopedApps").put("net.mk.dcApps.SolSys", "SolSys");
         } catch (JSONException ex) {
             
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static boolean reloadAppList(){
        RemoteSysSpec=MCWConfClass.SysSpec;
           try {        
            listOfUDApps=mkJSON.getStringArrayFromJSONArray(RemoteSysSpec.getJSONObject("UserDevelopedApps").names());
        } catch (JSONException ex) {
            Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
        }
        dlm.removeAllElements();
        for(int i=0;i<listOfUDApps.length;i++){
            dlm.addElement(listOfUDApps[i]);
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UDAppList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ResultDisplay = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        jButton2.setText("jButton2");

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Select App");

        UDAppList.setModel(dlm);
        jScrollPane1.setViewportView(UDAppList);

        jPanel1.setOpaque(false);

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Distributed Task :");

        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Result Interpreter:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Task Name");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Interpreter's Name");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout ResultDisplayLayout = new javax.swing.GroupLayout(ResultDisplay);
        ResultDisplay.setLayout(ResultDisplayLayout);
        ResultDisplayLayout.setHorizontalGroup(
            ResultDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        ResultDisplayLayout.setVerticalGroup(
            ResultDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ResultDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(41, 41, 41)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(0, 102, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Init");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("DeleteApp");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
//UserDevelopedApps
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    try {      
        jLabel5.setText(UDAppList.getSelectedValue().toString());
        jLabel6.setText(UDAppList.getSelectedValue().toString()+"Interpreter");
        //Interpreter
        Object[] Inputs={WebServerName,LICENSE_KEY,RemoteSysSpec};
        Class[] InputClasses={String.class,String.class,JSONObject.class};
         // Create a CompilingClassLoader
            CompileClass ccl = new CompileClass();
 
            // Load the main class through our CCL
            Class clas = ccl.loadClass("net.mk.dc.DistributedTask");
            System.out.println();
            clas = ccl.loadClass(UDAppList.getSelectedValue().toString()+"."+MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").getString(UDAppList.getSelectedValue().toString()));
            
            //For debugging
//            for(int i=0;i<clas.getConstructors().length;i++){
//                System.out.println("#UDAPP Constructor name\t"+clas.getConstructors()[i].getName());
//                System.out.println("#UDAPP Constructor getParameterTypes\t"+clas.getConstructors()[i].getParameterTypes().length);
//                for(int j=0;j<clas.getConstructors()[i].getParameterTypes().length;j++){
//                    System.out.println("#UDAPP getParameterTypes name\t"+clas.getConstructors()[i].getParameterTypes()[j].getName());
//                System.out.println("#UDAPP getParameterTypes getSimpleName\t"+clas.getConstructors()[i].getParameterTypes()[j].getSimpleName());
//                }
//            }
            
            JPanel UDAppGUI=(JPanel)clas.getConstructor(InputClasses).newInstance(Inputs);
            
            System.out.println("#UDAPP Created Panel");
            ResultDisplay.removeAll();
            //ResultDisplay.setLayout(new FlowLayout(FlowLayout.CENTER));
            ResultDisplay.setLayout(new BorderLayout());
            ResultDisplay.add(UDAppGUI, BorderLayout.CENTER);
            //ResultDisplay.add(UDAppGUI);
            validate();
            repaint();
            System.out.println("#UDAPP Set Panel");
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalArgumentException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InvocationTargetException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchMethodException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SecurityException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (JSONException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    }
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    try {        
        
        MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").remove(UDAppList.getSelectedValue().toString());
        UD_DCApps.reloadAppList();// Reload the list of Apps
        new Web().SendPOST("http://"+WebServerName+"/mcst/mcst.php", new String []{"data","LICENSE_KEY"}, new String[] {MCWConfClass.SysSpec.toString(),LICENSE_KEY}, true);
   
    } catch (JSONException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ResultDisplay;
    private javax.swing.JList UDAppList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

     protected void paintComponent( Graphics g ) 
{
   
        if (!isOpaque()) {
            super.paintComponent(g);
            return;
        }

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        g2.setPaint(Color.gray);
        int x = 0;
        int y = 0;
        // fill RoundRectangle2D.Double
        GradientPaint redtowhite = new GradientPaint(x, y, Color.LIGHT_GRAY, x, this.getHeight() / 2,
                Color.DARK_GRAY);
        g2.setPaint(redtowhite);
        //g2.fill(new RoundRectangle2D.Double(x, y, this.getWidth(), this.getHeight(), 10, 10));
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

        g2.setPaint(Color.GRAY);

        Paint p;
        p = new RadialGradientPaint(new Point2D.Double(getWidth() / 2.0,
                getHeight() / 2.0), getWidth() / 2.0f,
                new float[]{0.0f, 1.0f},
                new Color[]{new Color(6, 76, 160, 127),
            new Color(0.0f, 0.0f, 0.0f, 0.8f)});
        g2.setPaint(p);
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

}
    void testmethod(){
          try { 
      
        
        RemoteSysSpecs=DCGUI.getRemoteSysSpecs();
        //ExecuteApp, Create the pool
        DistributedTaskPool dtp= new DistributedTaskPool(LICENSE_KEY, 10,DCGUI.getRemoteSysSpecs());
        DCTaskExecuteUDApp dctexUDApp = new DCTaskExecuteUDApp(LICENSE_KEY,
                UDAppList.getSelectedValue().toString(), 
                ReadWriteTextFile.getContents(new File(UDAppList.getSelectedValue().toString()+".java")), null,true);
  
        for(int i=0;i<10;i++){
            dtp.Isubmit(5559, dctexUDApp, i);
            
                 //System.out.println("#Test Prime Number Task on:"+ COLLECTED_RESULTS[i]);
         }
           boolean finshed = dtp.DTaskQeueProcess();
            if(finshed)
            { 
                //ResultDisplay.removeAll();
                //ResultDisplay.setLayout( new FlowLayout() );
                for(int i=0;i<DistributedTaskPool.COLLECTED_RESULTS.length;i++){
                System.out.println("Result of Task"+i+" is "+DistributedTaskPool.COLLECTED_RESULTS[i]); 
                //ResultDisplay.add(new JLabel((String) DistributedTaskPool.COLLECTED_RESULTS[i]));
                jTextArea1.append(DistributedTaskPool.COLLECTED_RESULTS[i].toString()+"\n");
                repaint();
            }}else System.out.println("Looks not all the task were executed"); 
           
           //ResultDisplay
           
    }  catch (SecurityException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalArgumentException ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    }catch (Exception ex) {
        Logger.getLogger(UD_DCApps.class.getName()).log(Level.SEVERE, null, ex);
    } 
    }
}
