/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.mk.dcApps.CheckPrime;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import json.JSONException;
import json.JSONObject;
import net.mk.DTasks.DTaskTest;
import net.mk.DTasks.IsDivisibleByNumberDTask;
import net.mk.FJTasks.DistributedServiceFJTask;
import net.mk.FJTasks.IsPrimeNumbersFJTask;
import net.mk.dc.DistributedTaskPool;
import net.mk.dc.DistributedTaskService;
import net.mk.ppmcuGUI.FrontPage;

/**
 *
 * @author PDI
 */
public class VerifyPrimeNumberGUI extends javax.swing.JPanel {

    String LICENSE_KEY;
JSONObject RemoteSysSpec;
public JSONObject[] RemoteSysSpecs;
BufferedImage bufferedImage;
BufferedImage[] bufferedImages;
int FRAME_COUNT=0;
int[] FRAME_COUNTS;
double FPS=0.0;
double[] FPSs;
String IS_PRIME="Not Tested Yet";
double TimeTaken=-1.0;
int SpecCount=0;
    /**
     * Creates new form VerifyPrimeNumberGUI
     */
    public VerifyPrimeNumberGUI(String _LICENSE_KEY,JSONObject[] _RemoteSysSpec, boolean debug) {
        this.RemoteSysSpecs=_RemoteSysSpec;
        this.LICENSE_KEY=_LICENSE_KEY;
        initComponents();
        repaint();
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTextField1.setText("1000000000005418593");

        jButton1.setText("Check On network");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Check on this system");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 140, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 251, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            IS_PRIME="Is a Prime Number ="+IsPrimeNumberDTQeue();//IsPrimeNumberDTPool()  IsPrimeNumberDT() IsPrimeNumberDTQeue()
            System.out.println(IS_PRIME);
            repaint();
        } catch (InterruptedException ex) {
            Logger.getLogger(VerifyPrimeNumberGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public boolean IsPrimeNumberFJ(){
        long begTest = new java.util.Date().getTime();
        
        int nrOfProcessors = Runtime.getRuntime().availableProcessors();
        System.out.println("#PrimeNumbersFinder.getPrimeNumbers NumberOf Prcessors= "+RemoteSysSpecs.length);
        Vector result=new Vector();
        List futuresList = new ArrayList();
        BigInteger IsPrimeNumber=new BigInteger(jTextField1.getText());
        BigInteger Interval=IsPrimeNumber.divide(new BigInteger(String.valueOf(RemoteSysSpecs.length)));
        ForkJoinPool fjPool = new ForkJoinPool(RemoteSysSpecs.length);
        for (int numCount = 0; numCount <RemoteSysSpecs.length; numCount++) {
            //new DistributedServiceFJTask(LIC_KEY,newJOb[thisCount],5559,new IsDivisibleByNumberDTask(interval*numCount, interval*(numCount+1),IsPrimeNumber)).execute()
            futuresList.add(fjPool.submit(
                    new DistributedServiceFJTask(LICENSE_KEY,RemoteSysSpecs[numCount],5559,
                    new IsDivisibleByNumberDTask(
                    Interval.multiply(new BigInteger(String.valueOf(numCount))), 
                    Interval.multiply(new BigInteger(String.valueOf((numCount+1)))),IsPrimeNumber))));
            System.out.println("# Limit 1="+Interval.multiply(new BigInteger(String.valueOf(numCount)))
                    +"\n Limit 2="+Interval.multiply(new BigInteger(String.valueOf((numCount+1)))));
        }
        
        System.out.println("#PrimeNumbersFinder.getPrimeNumbers Start collecting results");
        for (Object future : futuresList) {
            try {
                    if(!(Boolean)((Future)future).get()) return false;

            } catch (InterruptedException e) {
            } catch (ExecutionException e) {
            }
        }
        Double secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
        System.out.println("#PrimeNumbersFinder.getPrimeNumbers  run time " + secs + " secs");
        
        return true;
    }

     static BigInteger IsPrimeNumber=new BigInteger("10000256589321");
    static BigInteger Interval;
    Object[] result;
public boolean IsPrimeNumberDT() throws InterruptedException{
    
      long begTest = new java.util.Date().getTime();
        Double secs;

    ExecutorService es = Executors.newCachedThreadPool();
    IsPrimeNumber=new BigInteger(jTextField1.getText());
    Interval=IsPrimeNumber.divide(new BigInteger(String.valueOf(RemoteSysSpecs.length)));
    //IsPrimeNumber=new BigInteger("90000256545454464893200345000000002354432654423654426354426354462354465234465234465324465423654425000000000000000000000000000000000000000000000000000000000003531");
    result=new Object[RemoteSysSpecs.length];
    SpecCount=0;
  
          for(int i=0;i<RemoteSysSpecs.length;i++){
//                    Thread GetSysInfoServicen = new Thread(new Runnable() {
              es.execute(new Runnable() {
            public void run() {
                try {
                   int thisCount=-1;
                         if(thisCount<0) //i.e. Not initiated already
                         if(SpecCount<RemoteSysSpecs.length)thisCount=SpecCount; //Set if it is first entry only
                         SpecCount++;
                         
                    result[thisCount]=new DistributedTaskService(LICENSE_KEY,RemoteSysSpecs[thisCount],5559,new IsDivisibleByNumberDTask(
                    Interval.multiply(new BigInteger(String.valueOf(thisCount))), 
                    Interval.multiply(new BigInteger(String.valueOf((thisCount+1)))),IsPrimeNumber)).execute();
                
                    System.out.println("# Limit 1="+Interval.multiply(new BigInteger(String.valueOf(thisCount)))
                    +"\n Limit 2="+Interval.multiply(new BigInteger(String.valueOf((thisCount+1)))));
                 System.out.println("#Test Prime Number Task on:"+ result[thisCount]);
                
                } catch (Exception ex) {
                    Logger.getLogger(FrontPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
       
        //GetSysInfoServicen.start();   
  }
          
         
            secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
            System.out.println("Task Submitted in: " + secs + " secs");
            es.shutdown();
            boolean finshed = es.awaitTermination(1, TimeUnit.DAYS);//Wait for a day.
            // all tasks have finished or the time has been reached.
            secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
            System.out.println("Task Finished in: " + secs + " secs");
            
            for(int i=0;i<result.length;i++){
                if(!(Boolean)result[i]) {System.out.println("Not A prime number"); return false;}
            }
            
            return true;
}
  
/**
 * Test Pool task scheduling.
 * @return
 * @throws InterruptedException 
 */
public boolean IsPrimeNumberDTPool() throws InterruptedException{
    
        long begTest = new java.util.Date().getTime();
        Double secs;

        DistributedTaskPool dtp=new DistributedTaskPool(LICENSE_KEY, 5, RemoteSysSpecs);
       // ExecutorService es = Executors.newCachedThreadPool();
        IsPrimeNumber=new BigInteger(jTextField1.getText());
        Interval=IsPrimeNumber.divide(new BigInteger(String.valueOf(5)));//5 Assigned at DistributedTaskPool dtp
        //IsPrimeNumber=new BigInteger("9000025600003531");
        result=new Object[RemoteSysSpecs.length];
        SpecCount=0;

          for(int i=1;i<=5;i++){
            dtp.Isubmit(5559, new IsDivisibleByNumberDTask(
                    Interval.multiply(new BigInteger(String.valueOf(i))), 
                    Interval.multiply(new BigInteger(String.valueOf((i+1)))),IsPrimeNumber), i-1);
            
             System.out.println("#Test Prime Number Task Block: "+i);
             System.out.println("# Limit 1="+Interval.multiply(new BigInteger(String.valueOf(i)))
                    +"\n Limit 2="+Interval.multiply(new BigInteger(String.valueOf((i+1)))));
                 //System.out.println("#Test Prime Number Task on:"+ COLLECTED_RESULTS[i]);
         }

            secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
            System.out.println("Task Submitted in: " + secs + " secs");
            //es.shutdown();
            boolean finshed =dtp.AllTaskCompleted();
            // all tasks have finished or the time has been reached.
            secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
            System.out.println("Task Finished in: " + secs + " secs");
            
            if(finshed)
            for(int i=0;i<DistributedTaskPool.COLLECTED_RESULTS.length;i++){
                System.out.println("Result of Task"+i+" is "+(Boolean)DistributedTaskPool.COLLECTED_RESULTS[i]); 
                if((Boolean)DistributedTaskPool.COLLECTED_RESULTS[i]) {System.out.println("Not a prime number"); return false;}
            }
            
            return true;
}

public boolean IsPrimeNumberDTQeue() throws InterruptedException{
    
        long begTest = new java.util.Date().getTime();
        Double secs;
        int TaskQty=10;
        DistributedTaskPool dtp=new DistributedTaskPool(LICENSE_KEY, TaskQty, RemoteSysSpecs);
       // ExecutorService es = Executors.newCachedThreadPool();
        IsPrimeNumber=new BigInteger(jTextField1.getText());
        Interval=IsPrimeNumber.divide(new BigInteger(String.valueOf(TaskQty)));//5 Assigned at DistributedTaskPool dtp
        //IsPrimeNumber=new BigInteger("9000025600003531");
        result=new Object[RemoteSysSpecs.length];
        SpecCount=0;

          for(int i=0;i<TaskQty;i++){
            dtp.Isubmit(5559, new IsDivisibleByNumberDTask(
                    Interval.multiply(new BigInteger(String.valueOf(i))).add(new BigInteger("2")), 
                    Interval.multiply(new BigInteger(String.valueOf((i+1)))).add(new BigInteger("2")),IsPrimeNumber), i);
            
             System.out.println("#Test Prime Number Task Block: "+i);
             System.out.println("# Limit 1="+Interval.multiply(new BigInteger(String.valueOf(i))).add(new BigInteger("2"))
                    +"\n Limit 2="+Interval.multiply(new BigInteger(String.valueOf((i+1)))).add(new BigInteger("2")));
                 //System.out.println("#Test Prime Number Task on:"+ COLLECTED_RESULTS[i]);
         }

            secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
            System.out.println("Task Submitted in: " + secs + " secs");
            //es.shutdown();
            boolean finshed = dtp.DTaskQeueProcess();
            // all tasks have finished or the time has been reached.
            secs = new Double((new java.util.Date().getTime() - begTest) * 0.001);
            System.out.println("Task Finished in: " + secs + " secs");
            
            if(finshed)
            for(int i=0;i<DistributedTaskPool.COLLECTED_RESULTS.length;i++){
                System.out.println("Result of Task"+i+" is "+(Boolean)DistributedTaskPool.COLLECTED_RESULTS[i]); 
                if((Boolean)DistributedTaskPool.COLLECTED_RESULTS[i]) {System.out.println("Not a prime number"); return false;}
            }else System.out.println("Looks not all the task were executed"); 
            
            return true;
}
 
     protected void paintComponent( Graphics g ) 
{
   
        if (!isOpaque()) {
            super.paintComponent(g);
            return;
        }

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        g2.setPaint(Color.gray);
        int x = 0;
        int y = 0;
        // fill RoundRectangle2D.Double
        GradientPaint redtowhite = new GradientPaint(x, y, Color.LIGHT_GRAY, x, this.getHeight() / 2,
                Color.DARK_GRAY);
        g2.setPaint(redtowhite);
        //g2.fill(new RoundRectangle2D.Double(x, y, this.getWidth(), this.getHeight(), 10, 10));
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

        g2.setPaint(Color.GRAY);

        Paint p;
        p = new RadialGradientPaint(new Point2D.Double(getWidth() / 2.0,
                getHeight() / 2.0), getWidth() / 2.0f,
                new float[]{0.0f, 1.0f},
                new Color[]{new Color(6, 76, 160, 127),
            new Color(0.0f, 0.0f, 0.0f, 0.8f)});
        g2.setPaint(p);
        g2.setColor(Color.LIGHT_GRAY);
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));
        g2.drawString(IS_PRIME,20, 100);
        //if(RemoteSysSpecs!=null)
        //g2.drawString("Active connections found="+RemoteSysSpecs.length,20, 120);
        //RemoteSysSpecs
        //System.out.println("Not Reachable...");
        setOpaque( false );
        super.paintComponent( g );
        setOpaque( true );

}
}
