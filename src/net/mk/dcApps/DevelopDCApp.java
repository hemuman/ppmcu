/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.mk.dcApps;

import net.mk.ppmcuGUI.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import json.JSONException;
import json.JSONObject;
import net.mk.ppmcu.GlobalMCUTest;
import net.mk.ppmcu2D.ScreenShareClient;

/**
 *
 * @author PDI
 */
public class DevelopDCApp extends javax.swing.JPanel {
    File DataFile;
    String DCAppName="DCAppFree";
    String LICENSE_KEY;
    JSONObject SysSpec;
   protected String WebServerName="127.0.0.1:8888/multicoreworld";
   // protected String WebServerName="multicoreworld.manojky.net";
    /**
     * Creates new form DevelopDCApp
     */
    public DevelopDCApp(String WebServerName,String LICENSE_KEY,JSONObject SysSpec) {
        this.WebServerName=WebServerName;
        this.LICENSE_KEY=LICENSE_KEY;
        this.SysSpec=SysSpec;
        initComponents();
        jEditorPane1.setText(getSampleDTApp(AppNameText.getText(),AppAKA.getText()));
        jEditorPane2.setText(getSampleInterpreter(AppNameText.getText()+"Interpreter",AppNameText.getText(),AppAKA.getText()));
    
      
       try{
           if(MCWConfClass.SysSpec.has("UserDevelopedApps"))
           MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put(DCAppName, "");//DCApp1
           else  MCWConfClass.SysSpec.put("UserDevelopedApps", new JSONObject("{'AddUDApps':{}}"));
           
           if(UD_DCApps.dlm !=null)
            UD_DCApps.reloadAppList();// Reload the list of Apps
        } 
catch (JSONException ex) {
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        } 
        //createFirstApp();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SaveAndCompile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AppNameText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        AppAKA = new javax.swing.JTextField();
        CreateApp = new javax.swing.JButton();
        AppSourceCode = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane3 = new javax.swing.JEditorPane();
        message = new javax.swing.JLabel();

        SaveAndCompile.setText("2. Save & Compile");
        SaveAndCompile.setEnabled(false);
        SaveAndCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAndCompileActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Code Name:");

        AppNameText.setText("DCApp1");

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("AKA:");

        AppAKA.setText("MyDCApp");

        CreateApp.setText("1. Create");
        CreateApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateAppActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jEditorPane2);

        AppSourceCode.addTab("App GUI", jScrollPane2);

        jScrollPane1.setViewportView(jEditorPane1);

        AppSourceCode.addTab("DistributedTask", jScrollPane1);

        jScrollPane3.setViewportView(jEditorPane3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );

        AppSourceCode.addTab("ForkJoinTask", jPanel1);

        message.setForeground(new java.awt.Color(51, 204, 0));
        message.setText("Message:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AppNameText)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AppAKA)
                .addGap(33, 33, 33)
                .addComponent(CreateApp))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveAndCompile))
            .addComponent(AppSourceCode, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AppNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(AppAKA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreateApp))
                .addComponent(AppSourceCode)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveAndCompile)
                    .addComponent(message)))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 1. Read data from Editor Pane
     * 2. Create temp file .java file
     * 3. Compile, display error if any or return message of success.
     * @param evt 
     */
    private void SaveAndCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAndCompileActionPerformed
        try {
            DCAppName=AppNameText.getText();
            //jEditorPane1.setText(getSampleDTApp(DCAppName));
            createDistributedTaskfile();
            
            createDatafile(AppAKA.getText()+"/"+DCAppName,jEditorPane1.getText());
            createDatafile(AppAKA.getText()+"/"+DCAppName+"Interpreter",jEditorPane2.getText());
            
           // System.out.println(RunClass.compileClasses(new String[]{DCAppName,DCAppName+"Interpreter"}));
            if(RunClass.compileClasses(new String[]{AppAKA.getText()+"."+DCAppName,AppAKA.getText()+"."+DCAppName+"Interpreter"})){//
                //JSONObject sourceCode=new JSONObject();
                //sourceCode.put(DCAppName+".java", jEditorPane1.getText());
                //sourceCode.put(DCAppName+"Interpreter"+".java", jEditorPane2.getText());
                
                MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put(AppAKA.getText(),DCAppName+"Interpreter");//DCApp1
                //System.out.println("# MCWConfClass.SysSpec"+MCWConfClass.SysSpec.toString(1));
                UD_DCApps.reloadAppList();// Reload the list of Apps
                if(MCWConfClass.hasInternet)
                new Web().SendPOST("http://"+WebServerName+"/mcst/mcst.php", new String []{"data","LICENSE_KEY"}, new String[] {MCWConfClass.SysSpec.toString(),LICENSE_KEY}, false);
            
                 //RunClass.main(new String[]{DCAppName});
                message.setText("Save and Compile was successful, added to UDApps");
                JOptionPane.showMessageDialog(SaveAndCompile, "Save and Compile was successful"
                        + "\n To run/test application go to"
                        + "\n 'Multicore Apps ->User Developed Apps'");
            }else{
                message.setText("Save and Compile failed!");
            }
           
            
        } catch (JSONException ex) {
             message.setText("Save and Compile failed!");
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
             message.setText("Save and Compile failed!");
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
             message.setText("Save and Compile failed!");
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_SaveAndCompileActionPerformed

    private void CreateAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateAppActionPerformed
        createAppAtWorkingDir();
    }//GEN-LAST:event_CreateAppActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AppAKA;
    private javax.swing.JTextField AppNameText;
    private javax.swing.JTabbedPane AppSourceCode;
    private javax.swing.JButton CreateApp;
    private javax.swing.JButton SaveAndCompile;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JEditorPane jEditorPane3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel message;
    // End of variables declaration//GEN-END:variables

     public boolean createAppAtWorkingDir(){
        
            /**
             * 1. Check if the user directory exists
             * 2. If not, prompt for creation
             * 3. Download JAR files into /lib folder
             * 4. Create a folder with name AppAKA
             * 5. Create source code files in it
             * 6. Compile
             */
            //1.
           System.out.println("Creating apps directory..."+System.getProperty("user.dir"));

            //2.
            new File(AppAKA.getText()).mkdir();
            
            AppNameText.setEditable(false);
            AppAKA.setEditable(false);
            jEditorPane1.setText(getSampleDTApp(AppNameText.getText(),AppAKA.getText()));
            jEditorPane2.setText(getSampleInterpreter(AppNameText.getText()+"Interpreter",AppNameText.getText(),AppAKA.getText()));
            CreateApp.setText("Name Locked");
            CreateApp.setEnabled(false);
            SaveAndCompile.setEnabled(true);
    
           
           return true;
    }
    
    
     
    public boolean createAppAtUserHomeDir(){
           try {
            /**
             * 1. Check if the user directory exists
             * 2. If not, prompt for creation
             * 3. Download JAR files into /lib folder
             * 4. Create a folder with name AppAKA
             * 5. Create source code files in it
             * 6. Compile
             */
            //1.
            if(new File(MCWConfClass.SysSpec.getString("UserDevelopedAppsDir")).exists())
            {
                System.out.println("Apps directory..."+MCWConfClass.SysSpec.getString("UserDevelopedAppsDir"));

            }else{
                
                System.out.println("Creating apps directory..."+MCWConfClass.SysSpec.getString("UserDevelopedAppsDir"));
                new File(MCWConfClass.SysSpec.getString("UserDevelopedAppsDir")).mkdirs();
                System.out.print("Done.");
            }
            System.setProperty("user.dir", MCWConfClass.SysSpec.getString("UserDevelopedAppsDir"));
            
            //2.
            new File(MCWConfClass.SysSpec.getString("UserDevelopedAppsDir")+"/"+AppAKA.getText()).mkdirs();
            
            AppNameText.setEditable(false);
            AppAKA.setEditable(false);
            jEditorPane1.setText(getSampleDTApp(AppNameText.getText(),AppAKA.getText()));
            jEditorPane2.setText(getSampleInterpreter(AppNameText.getText()+"Interpreter",AppNameText.getText(),AppAKA.getText()));
            CreateApp.setText("Name Locked");
            CreateApp.setEnabled(false);
            SaveAndCompile.setEnabled(true);
            
        } catch (JSONException ex) {
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        }
           
           return true;
    }
    
    
 public void createFirstApp(){
        try {
            DCAppName=AppNameText.getText();
            //jEditorPane1.setText(getSampleDTApp(DCAppName));
            createDistributedTaskfile();
            
            createDatafile(DCAppName,jEditorPane1.getText());
            createDatafile(DCAppName+"Interpreter",jEditorPane2.getText());
            
           // System.out.println(RunClass.compileClasses(new String[]{DCAppName,DCAppName+"Interpreter"}));
            if(RunClass.compileClasses(new String[]{DCAppName,DCAppName+"Interpreter"})){
                MCWConfClass.SysSpec.getJSONObject("UserDevelopedApps").put(DCAppName, "");//DCApp1
                UD_DCApps.reloadAppList();// Reload the list of Apps
            }
            RunClass.main(new String[]{DCAppName});
            
        } catch (JSONException ex) {
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(DevelopDCApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 private void createDatafile(String AppName, String Content) throws JSONException, IOException {

        
        DataFile = new File(AppName+".java");
        // System.out.println("Temp file : " + temp2.getAbsolutePath());
        //Write empty array
        FileWriter fw = null;
        try {
            fw = new FileWriter(DataFile.getAbsoluteFile());
        } catch (IOException ex) {
            Logger.getLogger(ScreenShareClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(Content);
        bw.close();

    }
 
  private void createDistributedTaskfile() throws JSONException, IOException {

        
        DataFile = new File("DistributedTask.java");
        // System.out.println("Temp file : " + temp2.getAbsolutePath());
        //Write empty array
        FileWriter fw = null;
        try {
            fw = new FileWriter(DataFile.getAbsoluteFile());
        } catch (IOException ex) {
            Logger.getLogger(ScreenShareClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(getDistributedTaskSC());
        bw.close();

    }
 /**
  * 
  * @param AppName
  * @return 
  */
 public String getSampleDTApp(String AppName,String Package){
 
     return "package "+Package+"; \n"
             + "import java.io.*;\n import net.mk.dc.DistributedTask;" +
            "\n" +
            "/**\n" +
            " *\n" +
            " * @serial  "+MCWConfClass.VERSION+"\n" +
            " * @author "+System.getProperty("user.name")+"\n" +
            " */\n" +
            "public class "+AppName+" extends DistributedTask\n" +
            "{\n public "+AppName+"(){} \n" +
            "  static public void main( String args[] ) throws Exception {\n" +
            "    System.out.println( \"Testing "+AppName+" \"+new "+AppName+"().compute());\n" +
            "  }\n"
            + "  @Override\n" +
            "    public Object compute() {\n" +
            "      System.out.println(\"Running DCAppFree \");\n"
             + "String result=System.getProperty(\"user.name\")+\" on \" +System.getProperty(\"os.name\");\n" +
            "      return result;" +
            
            "    }\n" +
            "}";
 
 }
 
 public String getSampleInterpreter(String AppName, String DTName,String Package){
     
     return "package "+Package+"; \n"
             + "import javax.swing.BoxLayout;\n" +
"import java.awt.event.ActionEvent;\n" +
"import java.awt.event.ActionListener;\n" +
"import java.io.File;\n" +
"import java.util.logging.Level;\n" +
"import java.util.logging.Logger;\n" +
"import javax.swing.JButton;\n" +
"import javax.swing.JLabel;\n" +
"import javax.swing.JPanel;\n" +
"import javax.swing.JTextArea;\n" +
"import json.JSONObject;\n" +
"import mkfs66o96.ReadWriteTextFile;\n" +
"import net.mk.DTasks.DCTaskExecuteUDApp;\n" +
"import net.mk.dc.DistributedTask;\n" +
"import net.mk.dc.DistributedTaskPool;\n"
+ "import net.mk.dcApps.DCGUI;\n"
+ "import net.mk.ppmcu.PPMCUApp;" +
"\n" +
"/**\n" +
" *\n" +
" * @serial  "+MCWConfClass.VERSION+"\n" +
" * @author "+System.getProperty("user.name")+"\n" +
" */\n" +
"public class "+AppName+" extends PPMCUApp {\n" +
"    String TaskName=\""+Package+"."+DTName+"\"; // Set the name of application.\n" +
"    JTextArea resultArea; // Component to collect result.\n" +
"    boolean debug; // Its a good practice to use the debug mode for printing data.\n" +
"    /**\n" +
"     * This the default constructor that will be used, do not alter parameters.\n" +
"     * @param LICENSE_KEY\n" +
"     * @param RemoteSysSpecs \n" +
"     */\n" +
"    public "+AppName+"(String WebServerName,String LICENSE_KEY, JSONObject RemoteSysSpec) {\n"+
 "//Initialize global variables\n" +
"        System.out.println(\"#DCTaskInterpreter Creating..\");\n" +
"        this.LICENSE_KEY = LICENSE_KEY;\n" +
"       // this.RemoteSysSpecs = RemoteSysSpecs;\n" +
"       // this.debug=debug;\n" +
"        //Create GUI\n" +
"        JButton go = new JButton(\"Run App\");\n" +
"        resultArea=new JTextArea();\n" +
"        resultArea.setColumns(30);\n" +
"        resultArea.setRows(10);\n" +
"        go.addActionListener(new ActionListener() {\n" +
"            public void actionPerformed(ActionEvent e) {\n" +
"                execute();// Call this to execute the distributed task over connected nodes/MPP clients.\n" +
"            }\n" +
"        });\n" +
"        JPanel top = new JPanel();\n" +
"        top.setLayout(new BoxLayout(top, BoxLayout.PAGE_AXIS));\n" +
"        JPanel panel1 = new JPanel(); \n" +
"        panel1.add(go);\n" +
"        top.add(panel1);\n" +
"        top.add(resultArea);\n" +
"        add(top);\n" +
"        System.out.print(\"#Done.\");" +

"    }\n" +
"\n" +
"    public boolean execute() {\n" +
"        boolean result = false;\n" +
"        try {\n" +
"            \n  //1. Get the list of remote machines available,\n" +
"            RemoteSysSpecs = DCGUI.RemoteSysSpecs;\n" +
"\n" +
"            //2. Initate the DistributedTaskPool,\n" +
"            DistributedTaskPool dtp = new DistributedTaskPool(LICENSE_KEY, 10, DCGUI.RemoteSysSpecs);\n" +
"            \n" +
"            //3. Get source code to distribute\n" +
"            String TaskCode=ReadWriteTextFile.getContents(new File(TaskName.replace(\".\", \"/\") + \".java\"));\n" +
"            if(debug)System.out.println(TaskName+\" \"+TaskCode);\n" +
"            \n" +
"            //4. Initiate the distributed task,\n" +
"            DCTaskExecuteUDApp dctexUDApp = new DCTaskExecuteUDApp(LICENSE_KEY,TaskName, TaskCode, null, true);\n" +
"\n" +
"            //5. Submit the task to DistributedTaskPool initiated in step 2,\n" +
"            for (int i = 0; i < 10; i++) {\n" +
"                dtp.Isubmit(5559, dctexUDApp, i);\n" +
"            }\n" +
"            \n" +
"            //6. Execute and wait for the task to be finished,\n" +
"            boolean finshed = dtp.DTaskQeueProcess();\n" +
"            \n" +
"            //7. On successful execution,\n" +
"            if (finshed) {\n" +
"                \n" +
"            //8. Collect the result, and add code for visualization,\n" +
"                for (int i = 0; i < DistributedTaskPool.result.length; i++) {\n" +
"                    System.out.println(\"Result of Task\" + i + \" is \" + DistributedTaskPool.result[i]);\n" +
"\n" +
"                    resultArea.append(DistributedTaskPool.result[i].toString()+\"\\n\");\n" +
"                    repaint();\n" +
"                }\n" +
"                \n" +
"            } else {\n" +
"                \n" +
"                if(debug)\n" +
"                System.out.println(\"Looks like not all the task were executed!\"); //Print error message\n" +
"                \n" +
"                resultArea.append(\"Looks like not all the task were executed!\"+\"\\n\");//Display error message\n" +
"                \n" +
"            }\n" +
"            \n" +
"            //9. Set execution status true;\n" +
"            result = true;" +

"         } catch (SecurityException ex) {\n" +
"            Logger.getLogger("+AppName+".class.getName()).log(Level.SEVERE, null, ex);\n" +
"        } catch (IllegalArgumentException ex) {\n" +
"            Logger.getLogger("+AppName+".class.getName()).log(Level.SEVERE, null, ex);\n" +
"        } catch (Exception ex) {\n" +
"            Logger.getLogger("+AppName+".class.getName()).log(Level.SEVERE, null, ex);\n" +
"        }\n" +
"\n" +
"\n" +
"        return result;\n" +
"    }\n" +
"}";
 }
 
 public String getDistributedTaskSC(){
     return "/**\n" +
" * Date 6/7/13\n" +
" * @author Manoj Kumar\n" +
" */\n" +
"public abstract class DistributedTask implements java.io.Serializable {\n" +
"    /**\n" +
"     * Initiate all the variables in constructor\n" +
"     */\n" +
"    \n" +
"    /**\n" +
"     * Add abstract class to compute the task\n" +
"     */\n" +
"    \n" +
"    public abstract Object compute();\n" +
"    \n" +
"   \n" +
"}";
 }
 
 protected void paintComponent( Graphics g ) 
{
   
        if (!isOpaque()) {
            super.paintComponent(g);
            return;
        }

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        g2.setPaint(Color.gray);
        int x = 0;
        int y = 0;
        // fill RoundRectangle2D.Double
        GradientPaint redtowhite = new GradientPaint(x, y, Color.LIGHT_GRAY, x, this.getHeight() / 2,
                Color.DARK_GRAY);
        g2.setPaint(redtowhite);
        //g2.fill(new RoundRectangle2D.Double(x, y, this.getWidth(), this.getHeight(), 10, 10));
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

        g2.setPaint(Color.GRAY);

        Paint p;
        p = new RadialGradientPaint(new Point2D.Double(getWidth() / 2.0,
                getHeight() / 2.0), getWidth() / 2.0f,
                new float[]{0.0f, 1.0f},
                new Color[]{new Color(6, 76, 160, 127),
            new Color(0.0f, 0.0f, 0.0f, 0.8f)});
        g2.setPaint(p);
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));

}

     public static void main(String[] args){
        /**
         * import java.io.*;

public class DCAppFree
{
  static public void main( String args[] ) throws Exception {
    System.out.println( "foo! "+args[0]+" "+args[1] );
  }
}

         */
           String WebServerName="127.0.0.1:8888/multicoreworld";
   // String WebServerName="multicoreworld.manojky.net";
        MCWConfClass.SysSpec=new GlobalMCUTest().printMachineInfo(true, true);;// Assign SysSpec to Codebase which will be used by multiple applications
       JOptionPane.showMessageDialog(null, new DevelopDCApp(WebServerName,"TestLic",new JSONObject()));
    }

}