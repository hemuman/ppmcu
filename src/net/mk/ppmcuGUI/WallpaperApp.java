/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.mk.ppmcuGUI;

import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import json.JSONArray;
import json.JSONException;
import json.JSONObject;
import net.mk.os.OSAppGraphics;
import net.mk.ppmcu.GlobalMCUTest;
import net.mk.ppmcu2D.ImageGridTest;
import net.mk.ppmcu2D.UIToolKit;

/**
 *
 * @author PDI
 */
public class WallpaperApp extends javax.swing.JPanel {
    JSONObject SysSpec;
    String LICENSE_KEY;
    String WebServerName;
    String COPYRIGHT = "\u00a9";
    BufferedImage BGImage, IconImage;
    JFileChooser jfc;
   // Toolkit.getDefaultToolkit().getScreenSize();
    /**
     * Creates new form WallpaperApp
     */
    public WallpaperApp(String _WebServerName,String LICENSE_KEY,JSONObject _SysSpec) {
        this.LICENSE_KEY=LICENSE_KEY;
        this.WebServerName=_WebServerName;
        initComponents();
        SysSpec = new GlobalMCUTest().printMachineInfo(false, true);
        revalidate();
        repaint();
        
        jfc=new JFileChooser();
        jfc.setMultiSelectionEnabled(false);
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar2 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jButton3.setText("1.Select BG  Image");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton3);

        jButton1.setText("2. Select Icon");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton1);

        jButton4.setText("3. Save");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 503, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(639, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       jfc.showOpenDialog(this);
        try {
         BGImage= ImageIO.read(jfc.getSelectedFile());
        } catch (IOException ex) {
            Logger.getLogger(ImageGridTest.class.getName()).log(Level.SEVERE, null, ex);
        }
       // jButton1.setIcon(new ImageIcon(BGImage));
        repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       jfc.showOpenDialog(this);
        try {
         IconImage= ImageIO.read(jfc.getSelectedFile());
        } catch (IOException ex) {
            Logger.getLogger(ImageGridTest.class.getName()).log(Level.SEVERE, null, ex);
        }
       // jButton1.setIcon(new ImageIcon(BGImage));
        repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jfc.showSaveDialog(this);
            
            
            File outputfile = new File(jfc.getSelectedFile().getAbsolutePath()+"/MCWwallpaper.png");
            System.out.println("Saving..."+outputfile.getAbsolutePath());
            if(BGImage==null) BGImage=OSAppGraphics.getMCWDefaultWallpaper();
              if(  !ImageIO.write(OSAppGraphics.getInfoWallpaper(BGImage, IconImage, SysSpec), "png", outputfile)){
                  System.out.println("Did not write: "+outputfile.getAbsolutePath());
              }
            
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        } catch (IOException ex) {
            Logger.getLogger(WallpaperApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JToolBar jToolBar2;
    // End of variables declaration//GEN-END:variables

    
   protected void paintComponent( Graphics g ) {
      
        if ( !isOpaque( ) )
        {
            super.paintComponent( g );
            return;
        }

      Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
           g2.setPaint(Color.gray);
        int x = 0;
        int y = 0;
        // fill RoundRectangle2D.Double
        GradientPaint redtowhite = new GradientPaint(x, y, Color.LIGHT_GRAY, x, this.getHeight()/2,
            Color.DARK_GRAY);
        g2.setPaint(redtowhite);
        //g2.fill(new RoundRectangle2D.Double(x, y, this.getWidth(), this.getHeight(), 10, 10));
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));
        
        
        g2.setPaint(Color.GRAY);
        
        Paint p;
        p = new RadialGradientPaint(new Point2D.Double(getWidth() / 2.0,
                getHeight() / 2.0), getWidth() / 2.0f,
                new float[] { 0.0f, 1.0f },
                new Color[] { new Color(6, 76, 160, 127),
                    new Color(0.0f, 0.0f, 0.0f, 0.8f) });
        g2.setPaint(p);
        
        g.setColor(new Color(242,242,192)); // News Paper Color/ Khakee
        g2.fill(new Rectangle2D.Double(x, y, this.getWidth(), this.getHeight()));
        
        
        if(BGImage!=null) g2.drawImage(BGImage, 0, 0, this);
        
        g2.drawImage(UIToolKit.getParametricCurve(getWidth(), getHeight(),0.01f, false), null, this);
        Font font = new Font("League-Gothic", Font.ROMAN_BASELINE, 40);
            
            if(IconImage!=null) {
                //BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_4BYTE_ABGR_PRE);
                //image.createGraphics().drawImage(IconImage, 0, 0, this);
                //UIToolKit.applyShadow(image);
                g2.drawImage(IconImage, getWidth() - IconImage.getWidth()-100, 20, this);}
            else{
                /**
             * Draw round corner rectangle
             */
            g2.setColor(Color.DARK_GRAY);
            g2.fillRoundRect(getWidth() - 250 - 2, 200 - 150 - 2, 500, 204, 30, 30);
            g2.setColor(Color.WHITE);
            g2.fillRoundRect(getWidth() - 250, 200 - 150, 500, 200, 30, 30);
            g2.setColor(Color.DARK_GRAY);
            g2.fillRoundRect(getWidth() - 250 + 5, 200 - 150 + 5, 490, 190, 30, 30);

            g2.setFont(MCWConfClass.getFont(5, Font.ROMAN_BASELINE, 40));
            // g.setFont(g.getFont().deriveFont(100f));
            g2.setColor(Color.DARK_GRAY);
            // g.drawString("MCW", image.getWidth()-330, 200);

            //Set Rank
            font = new Font("League-Gothic", Font.BOLD, 100);
            g2.setFont(font);
            // g.setFont(g.getFont().deriveFont(100f));
            g2.setColor(Color.WHITE);
            g2.drawString("MCW", getWidth() - 200, 200);
            }

            //g.setFont(getFont(5,Font.BOLD,22));
            font = new Font("League-Gothic", Font.BOLD, 15);
            g2.setFont(font);
            g2.setColor(Color.DARK_GRAY);

            BufferedImage temp=null,temp2=null;
            //Print information
            try {
                JSONObject OS = SysSpec.getJSONObject("OS");
                JSONArray names = OS.names();
                names = OS.names();
                temp=OSAppGraphics.getJSONDataKhakee(185, OS, "Operating System", false);
                g2.drawImage(temp, getWidth() - temp.getWidth()-50, getHeight() - 2*temp.getHeight() - 10, this);

                font = new Font("League-Gothic", Font.BOLD, 10);
                g2.setFont(font);
                g2.setColor(Color.LIGHT_GRAY);
                g2.setColor(new Color(6, 112, 154)); //News Papaer Ink
                int OS_ENDPOS = getHeight() - 35 - 12 * names.length();
                //Print Info
                OS = SysSpec.getJSONObject("RAM");
                names = OS.names();
                temp2=OSAppGraphics.getJSONDataKhakee(185, OS, "Processing Hardware", false);
                g2.drawImage(temp2,getWidth() - temp2.getWidth()-50, getHeight() - temp2.getHeight() - 10, this);

                //  START

                OS = SysSpec.getJSONObject("ROM");
                names = OS.names();
                temp=OSAppGraphics.getROMDataKhakee(500 - 195, OS, false);
                g2.drawImage(temp, getWidth() - temp2.getWidth()-temp.getWidth()-60, getHeight() - temp.getHeight() - 10, this);

            } catch (JSONException ex) {
                Logger.getLogger(WorldSpeedTestGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            g2.drawString(COPYRIGHT+" http://multicoreworld.manojky.net", 10, getHeight() - 20);

           // ImageIO.write(image, "png", new File("MCW_Rank.png"));
            //g.dispose();
        
    }

   
public static void main(String[] args) throws JSONException{
    /**
         * *
         * Systems GUIs
         */
        try {
            
            //UIManager.put("nimbusBase", new Color(255,10,10));
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    try {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    } catch (InstantiationException ex) {
                        Logger.getLogger(WallpaperApp.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(WallpaperApp.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedLookAndFeelException ex) {
                        Logger.getLogger(WallpaperApp.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WallpaperApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } 
        
        JOptionPane.showMessageDialog(null, new WallpaperApp("","",new JSONObject()));
   
}

}
